%{

Creates an exact solution to the unsmoothed Dantzig Selector problem,
then solves the smoothed Dantzig Selector problem with various types of continuation.

Figure 4
%}
%% Setup the path
% User should add "TFOCS" base directory themself (location varies)
% and then run "setup_path_test.m" in the "paper" directory
%% Setup a test problem
opts = [];
opts.seed = 23421;
opts.smoothed = false; 
opts.SNR = 30;
opts.type = 'dct';
opts.N = 2^8;
opts.M = round(opts.N/4);
[xExact,A,b,normA2,delta0,D,x0,xPlug_exact,mu0] = setup_Dantzig(opts);

if iscell(A)
    Aff = A{1};
    Att = A{2};
    N = length(xExact); M = length(b);
else
    Aff = @(x) A*x;
    Att = @(x) A'*x;
    [M,N] = size(A);
end
Af = @(x) multiplyA( Aff, Att, 'forward', x );
At = @(x) multiplyA( Aff, Att, 'transpose', x );

obj = @(x) norm(x,1) + mu0/2*sum_square(x-xPlug_exact);
errp  = @(f,l,xk) norm( xk - xExact) / norm( xExact );

oExact = obj(xExact);
globalErrors = @(f,l,xk) ComputeErrors( xExact, oExact, xk, f );

dynamicRange = @(x) 20*log10( max(abs(x)) / min(abs(x(~~x))) );
dr = dynamicRange(xExact);
dr0 = dynamicRange(x0);
fprintf('Actual dynamic range is %.1f, wanted it to be %.1f\n',dr,dr0);
fprintf('  Exact solution violates constraints by  %.2e\n',...
    norm( diag(D)*Att( Aff(xExact) - b),Inf ) - delta0 );
fprintf('  Original signal violates constraints by %.2e\n',...
    norm( diag(D)*Att( Aff(x0) - b),Inf ) - delta0 );
fprintf('  True solution has %d nnz, i.e. %.1f%% sparse\n',nnz(xExact), nnz(xExact)/N*100 );
%%
ERRS = {};
CONTINUATION_LOCATIONS={};
%% Test the smoothed problem, no continuation
opts=[];
e_l1 = @(xk) abs( norm(xk,1) - norm(xExact,1) );
arg2 = @(list) list(2);
err_l1 = @(f,l,xk)  runningAvg(50,norm(xk,1),'std');
opts.errFcn = { errp, globalErrors };
stopTol = 1e-3;
opts.maxits = 4000;
opts.printEvery = 500;
opts.solver='solver_AT';


% for CONTINUATION = [2]
for CONTINUATION = -2:2;
opts.xPlug = zeros(N,1);


mu0     = 1e-2;
% mu0     = 1e-3;
tolFinal= 1e-8;
cOffset = 3;
k_end   = 1;      % for the non-continuation versions
tol     = tolFinal;
switch CONTINUATION

    case -2
        % no continuation, but with small mu
        mu = mu0/10;
    case -1
        % no continuation
        mu = mu0;               
    case 0
        % no continuation, but with large mu
        mu = 10*mu0;
    case {1,2}
        % 1: continuation: fixed mu, update x0
        % 2: accelerated continuation, version 1
        tol = norm(b)*1e0;
        k_end = 15;
        mu = 50*mu0;
        mu_continuation = mu;
end

xOld = zeros(N,1);
opts.tol = tol;
opts.lambda0 = zeros(N,1);
lambdaOld = opts.lambda0;
continuation_locations = [];
rel_differences = [];relDiff=1;
error_history = [];
multiplyA();  % zero it out.
for k = 1:k_end
    fprintf('----------------------- Solving with mu = %.1e, k = %d ---------------\n',mu,k);

    stopTol = stopTol/2;
    
    opts.restart = Inf;
    if k == k_end
        opts.tol = tolFinal;
        if CONTINUATION <= 0
            opts.maxits = 12000;
%             opts.maxits = 5000;
        else
            opts.maxits = 5000;
            opts.restart = 1000;  % check this
        end
        opts.stopFcn = [];

    elseif CONTINUATION >= 1
        opts.tol = opts.tol/2;
    end
    if isfield(opts,'stopFcn') && ~isempty(opts.stopFcn)
        opts.tol = 0;
    end
    

    runningAvg(); % zero it out
%     tic;
%     [x2,lambda2,out]=solve_Dantzig({Af,At}, b,D, mu, delta0, opts );
    A = linop_handles([N,N],Af,At);
    opts.stopCrit = 2;
    [ x2, out ] = solver_sDantzig( {A,D}, b, delta0, mu,opts.xPlug,opts.lambda0, opts );
    lambda2 = out.dual;
    
    continuation_locations = [continuation_locations; out.niter ];
    
    
    switch CONTINUATION
        case 1
            % standard continuation
            opts.lambda0 = lambda2;
            opts.xPlug = x2;
        case 2
            % accelerated continuation
            opts.lambda0 = lambda2;
            opts.xPlug = x2 + (k+0)/(k+0+3)*( x2 - xOld );
    end
    
    relDiff = norm( xOld - x2 )/norm(xOld);
    rel_differences = [rel_differences; relDiff];


    xOld = x2;
    lambdaOld = lambda2;

    error_history = [error_history; out.err ];

end
ERRS{CONTINUATION+cOffset} = error_history;
CONTINUATION_LOCATIONS{CONTINUATION+cOffset} = continuation_locations;

end
%% simple plot
% figure(2);
% semilogy( error_history(:,1) );
% hold all
%% plot
figure(1);
clf;  handles = [];
cList = [-2:2];
for CONTINUATION = cList
    error_history = ERRS{CONTINUATION+cOffset};
    continuation_locations = CONTINUATION_LOCATIONS{CONTINUATION+cOffset};
    errs = error_history(:,1);
    iter = 1:length(errs);
    
    h=semilogy( iter, errs,'linewidth',2 );
    if CONTINUATION <= 0
        set(h,'linestyle','--');
    end
    handles( CONTINUATION + cOffset ) = h;
    hold all
end
hold on

for CONTINUATION = cList
    error_history = ERRS{CONTINUATION+cOffset};
    continuation_locations = CONTINUATION_LOCATIONS{CONTINUATION+cOffset};
    continuation_locations = cumsum(continuation_locations);

    errs = error_history(:,1);
    iter = 1:length(errs);
    if CONTINUATION > 0
        clr = get(handles(CONTINUATION+cOffset),'color');
        semilogy(continuation_locations,errs(continuation_locations),...
            'o','color',clr,'markersize',10 );
    end
end
names = {'no continuation, \mu/10','no continuation, \mu',...
    'no continuation, 10 \mu','regular continuation','accelerated continuation'};
    
legend(handles(cList+cOffset),names{cList+cOffset});

xlabel('iterations','fontsize',16);
ylabel('error','fontsize',16);

% orient landscape
% print('-dpdf','continuation_Sept');
%%
% xlim([0,Inf])
%% add some info in the title
title(sprintf('Dantzig Problem, N=%d,M=%d,DCT matrix, nnz(x)=%d,x0=0\ndr(x)=%.1f dB,||x||_\\infty=%.1f,\\mu=%.2e,\\mu for continuation = %.1f*\\mu,||D||=%.1e',...
    N,M,nnz(xExact),dr,norm(xExact,Inf),mu0,mu_continuation/mu0,norm(D)) );